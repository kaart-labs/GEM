meta {
  title: "QC Style For Sanitas Team";
  description: "Highlights features that were created/modified by users";
  watch-modified: true;
  version: "1.5";
  icon: "http://uncrate.com/p/2016/02/smart-kart.jpg";

}
/* Notes

1.0 Added styles -- provided by Jenn -- and users -- Ian -- 3/11/2019

1.1 Configured styles -- Louis -- 3/13/2019

1.2 Configured style colors and highlighting -- Ian -- 3/15/2019

1.3 Simplified user lines -- Louis -- 3/18/2019

1.4 Adjusted user, style lines and appearances -- 3/20/2019

1.5 Alphabetized users, added new users, added tips, simplified node highlight & node modified overlays -- Louis,Ian,AndrewP -- 5/15/2019

Tips:

A setting should be created for each separate user:

setting::user_aaron {
  type: boolean;
  label: tr("Turn User Aaron On/Off");
  default: false;
}

-- after :: comes your setting "class" which can be named as you will. Our example show user_aaron
-- Type: boolean; should always exist
-- label: tr("Anything you want to put here") -> This is what shows up under setting in JOSM
-- Default: false -> the setting will remain disabled on launch until a user enables it

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


at which point, it becomes necessary to create a selector statement for your user:

*[eval(JOSM_search("user:vespax"))][setting("user_aaron")] {
  set .aaron;
}

-- * denotes what you are selecting, in this case, every element type in OSM
-- [eval(JOSM_search("user:vespax"))] -> this is necessary and should be constructed as such.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to construct time stamps, you can use the following:


String: "[eval(JOSM_search("timestamp:2016-02-20/"))]" can be modified in several ways
"timestamp:2016-02-20/" -- Shows all edits edited after date
"timestamp:2016-02-20/2016-02-22" -- Shows all edits after 02-20 but before 02-22
"timestamp:2016-02/ Day and Month can be removed to widen the range of edits shown, example here shows all edits starting in FEB2016.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

So, a timestamped search would look like this:

*[eval(JOSM_search("user:IndianaJones737"))][eval(JOSM_search("timestamp:2016-03-14/2016-03-15"))] {
  casing-width: 10;
  casing-color: green;
  casing-opacity: 0.2;
}

-- set .aaron; -> this is setting the class for this statement. This allows us to call it out later on. Classes
can be set like that or as so -> set aaron;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

way.aaron, & node.aaron,

-- This shows that we are looking for all ways/nodes which meet the "aaron" class. The comma here denotes
that there is another selector we would like to call out after "aaron"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


{
  z-index: -10;
  casing-color: lime;
  casing-width: 10;
  casing-opacity: 0.3;
 
 
}

-- This is our code block which will style up whatever we called out as a selector

*/

/* Create Settings */


/* User Settings */

setting::user_AlexD {
            type:boolean;
            label:tr("Turn User Soccersweeper On/Off");
            default:true;
            }
setting::user_ArleneC {
            type:boolean;
            label:tr("Turn User ArleneC On/Off");
            default:true;
            }
setting::user_Anthony {
            type:boolean;
            label:tr("Turn User acrague On/Off");
            default:true;
            }
setting::user_BreiaV {
            type:boolean;
            label:tr("Turn User 3agleOne On/Off");
            default:true;
            }
setting::user_Casey {
            type:boolean;
            label:tr("Turn User CaseyIvanW On/Off");
            default:true;
            }
setting::user_Ethan {
            type:boolean;
            label:tr("Turn User EthanK On/Off");
            default:true;
            }
setting::user_JacindaD {
            type:boolean;
            label:tr("Turn User Cinderblock On/Off");
            default:true;
            }
setting::user_Johnny {
            type:boolean;
            label:tr("Turn User spititout On/Off");
            default:true;
            }
setting::user_Jonathan {
            type:boolean;
            label:tr("Turn User Joni5isalive On/Off");
            default:true;
            }
setting::user_Keeley {
            type:boolean;
            label:tr("Turn User kebobo On/Off");
            default:true;
            }
setting::user_LeanneS {
            type:boolean;
            label:tr("Turn User LSkalayo On/Off");
            default:true;
            }
setting::user_LoganM {
            type:boolean;
            label:tr("Turn User Dalekokarta On/Off");
            default:true;
            }
setting::user_LouisM {
            type:boolean;
            label:tr("Turn User BlueRanger On/Off");
            default:true;
            }
setting::user_Marshall {
            type:boolean;
            label:tr("Turn User MTG5093 On/Off");
            default:true;
            }
setting::user_MattB {
            type:boolean;
            label:tr("Turn User MappnMatt On/Off");
            default:true;
            }
setting::user_MorgenM {
            type:boolean;
            label:tr("Turn User MMantlo On/Off");
            default:true;
            }
setting::user_NatashaS {
            type:boolean;
            label:tr("Turn User rallynukab On/Off");
            default:true;
            }
setting::user_NickE {
            type:boolean;
            label:tr("Turn User jedimasterflint On/Off");
            default:true;
            }
setting::user_Rob {
            type:boolean;
            label:tr("Turn User RouteRob On/Off");
            default:true;
            }
setting::user_RobinH {
            type:boolean;
            label:tr("Turn User RobinNoodles On/Off");
            default:true;
            }
setting::user_RonmelR {
            type:boolean;
            label:tr("Turn User Mel_1 On/Off");
            default:true;
            }
setting::user_Sarah {
            type:boolean;
            label:tr("Turn User Yagni On/Off");
            default:true;
            }
setting::user_Savana {
            type:boolean;
            label:tr("Turn User staysavy On/Off");
            default:true;
            }
setting::user_Sharon {
            type:boolean;
            label:tr("Turn User mapcraft On/Off");
            default:true;
            }
setting::user_Sherry {
            type:boolean;
            label:tr("Turn User Sherbare On/Off");
            default:true;
            }
setting::user_SteveC {
            type:boolean;
            label:tr("Turn User Smoothdog On/Off");
            default:true;
            }
setting::user_WilliamF {
            type:boolean;
            label:tr("Turn User ImjusBuddy On/Off");
            default:true;
            }
setting::user_BrianL {
            type:boolean;
            label:tr("Turn User Unicorn Ostrich On/Off");
            default:true;
            }





/* Tracking Selectors -- Way and node style BEFORE they are uploaded */

node:modified::modified_layer {
    symbol-shape: Circle;
    symbol-size: 20;
    symbol-stroke-color: orange;
    symbol-stroke-width: 3px;
    symbol-fill-opacity: 0.5;
    z-index: -5;
}

way:modified::modified_layer,
node:modified < way::modified_layer {
    width: 6;
    color: transparent;
    opacity: 0;
    casing-width: 7;
    casing-color: #00ff00;
    casing-opacity: 0.7;
    z-index: -5;
}

/* QC Styles */


/* User specific styles */

*[eval(JOSM_search("user:Soccersweeper"))][setting("user_AlexD")] {
  set .AlexD
}
*[eval(JOSM_search("user:ArleneC"))][setting("user_ArleneC")] {
  set .ArleneC
}
*[eval(JOSM_search("user:acrague"))][setting("user_Anthony")] {
  set .Anthony
}
*[eval(JOSM_search("user:3agleOne"))][setting("user_BreiaV")] {
  set .BreiaV
}
*[eval(JOSM_search("user:CaseyIvanW"))][setting("user_Casey")] {
  set .Casey
}
*[eval(JOSM_search("user:EthanK"))][setting("user_Ethan")] {
  set .Ethan
}
*[eval(JOSM_search("user:Cinderblock"))][setting("user_JacindaD")] {
  set .JacindaD
}
*[eval(JOSM_search("user:spititout"))][setting("user_Johnny")] {
  set .Johnny
}
*[eval(JOSM_search("user:Joni5isalive"))][setting("user_Jonathan")] {
  set .Jonathan
}
*[eval(JOSM_search("user:kebobo"))][setting("user_Keeley")] {
  set .Keeley
}
*[eval(JOSM_search("user:LSkalayo"))][setting("user_LeanneS")] {
  set .LeanneS
}
*[eval(JOSM_search("user:Dalekokarta"))][setting("user_LoganM")] {
  set .LoganM
}
*[eval(JOSM_search("user:BlueRanger"))][setting("user_LouisM")] {
  set .LouisM
}
*[eval(JOSM_search("user:MTG5093"))][setting("user_Marshall")] {
  set .Marshall
}
*[eval(JOSM_search("user:MappnMatt"))][setting("user_MattB")] {
  set .MattB
}
*[eval(JOSM_search("user:MMantlo"))][setting("user_MorgenM")] {
  set .MorgenM
}
*[eval(JOSM_search("user:rallynukab"))][setting("user_NatashaS")] {
  set .NatashaS
}
*[eval(JOSM_search("user:jedimasterflint"))][setting("user_NickE")] {
  set .NickE
}
*[eval(JOSM_search("user:RouteRob"))][setting("user_Rob")] {
  set .Rob
}
*[eval(JOSM_search("user:RobinNoodles"))][setting("user_RobinH")] {
  set .RobinH
}
*[eval(JOSM_search("user:Mel_1"))][setting("user_RonmelR")] {
  set .RonmelR
}
*[eval(JOSM_search("user:Yagni"))][setting("user_Sarah")] {
  set .Sarah
}
*[eval(JOSM_search("user:staysavy"))][setting("user_Savana")] {
  set .Savana
}
*[eval(JOSM_search("user:mapcraft"))][setting("user_Sharon")] {
  set .Sharon
}
*[eval(JOSM_search("user:Sherbare"))][setting("user_Sherry")] {
  set .Sherry
}
*[eval(JOSM_search("user:Smoothdog"))][setting("user_SteveC")] {
  set .SteveC
}
*[eval(JOSM_search("user:ImjusBuddy"))][setting("user_WilliamF")] {
  set .WilliamF
}
*[eval(JOSM_search("user:\"Unicorn Ostrich\""))][setting("user_BrianL")] {
  set .BrianL;
}



/* This is how you search for someone with a space in their name

*[eval(JOSM_search("user:"Hector Vector""))] {
  set .jman;
}

*/

/* Styling of ways and nodes once they belong to "history" for each individual user */


way.AlexD{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.ArleneC{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Anthony{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.BreiaV{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Casey{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Ethan{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.JacindaD{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Johnny{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Jonathan{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Keeley{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.LeanneS{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.LoganM{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.LouisM{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Marshall{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.MattB{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.MorgenM{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.NatashaS{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.NickE{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Rob{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.RobinH{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.RonmelR{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Sarah{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Savana{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Sharon{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.Sherry{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.SteveC{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.WilliamF{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}way.BrianL{
  z-index: -10;
  casing-color: #B108D6;
  casing-width: 5;
  casing-opacity: 0.6;
  /*
  text: eval(concat("Highway type =", " ", tag("highway")));
  text-offset: -20;
  */
}
/*NODESTYLE*/

node.AlexD{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.ArleneC{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Anthony{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.BreiaV{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Casey{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Ethan{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.JacindaD{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Johnny{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Jonathan{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Keeley{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.LeanneS{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.LoganM{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.LouisM{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Marshall{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.MattB{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.MorgenM{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.NatashaS{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.NickE{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Rob{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.RobinH{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.RonmelR{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Sarah{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Savana{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Sharon{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.Sherry{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.SteveC{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.WilliamF{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}node.BrianL{
  symbol-size: 10;
  symbol-shape: Triangle;
  symbol-stroke-color: #0055ff;
  symbol-stroke-width: 3px;
  symbol-fill-opacity: 0.5;
  z-index: -5;
}


node:selected::selected_layer {
    symbol-shape: circle;
    symbol-size: 22;
    symbol-stroke-color: #DF2E08;
    symbol-stroke-width: 3px;
    symbol-fill-opacity: 0.5;
    z-index: -5;
}
